/**
 * Attributes Registry
 * Service managing the persistence of attributes in a local registry
 *
 * The version of the OpenAPI document: {{version}}
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package it.pagopa.pdnd.interop.uservice.attributeregistrymanagement.client.api

import it.pagopa.pdnd.interop.uservice.attributeregistrymanagement.client.model.Attribute
import it.pagopa.pdnd.interop.uservice.attributeregistrymanagement.client.model.AttributeSeed
import it.pagopa.pdnd.interop.uservice.attributeregistrymanagement.client.model.AttributesResponse
import it.pagopa.pdnd.interop.uservice.attributeregistrymanagement.client.model.Problem
import java.util.UUID
import it.pagopa.pdnd.interop.uservice.attributeregistrymanagement.client.invoker._
import it.pagopa.pdnd.interop.uservice.attributeregistrymanagement.client.invoker.CollectionFormats._
import it.pagopa.pdnd.interop.uservice.attributeregistrymanagement.client.invoker.ApiKeyLocations._

object AttributeApi {

  def apply(baseUrl: String = "https://gateway.interop.pdnd.dev/pdnd-interop-uservice-attribute-registry-management/}") = new AttributeApi(baseUrl)
}

class AttributeApi(baseUrl: String) {

  /**
   * Creates the attribute passed as payload
   * 
   * Expected answers:
   *   code 201 : Attribute (Attribute created)
   *   code 400 : Problem (Bad Request)
   * 
   * @param attributeSeed Contains the attribute data to save.
   */
  def createAttribute(attributeSeed: AttributeSeed): ApiRequest[Attribute] =
    ApiRequest[Attribute](ApiMethods.POST, baseUrl, "/attributes", "application/json")
      .withBody(attributeSeed)
      .withSuccessResponse[Attribute](201)
      .withErrorResponse[Problem](400)
      

  /**
   * Creates the attribute passed as payload
   * 
   * Expected answers:
   *   code 201 : AttributesResponse (Array of created attributes and already exising ones...)
   *   code 400 : Problem (Bad Request)
   * 
   * @param attributeSeed Contains the array of attributes data to save.
   */
  def createAttributes(attributeSeed: Seq[AttributeSeed]): ApiRequest[AttributesResponse] =
    ApiRequest[AttributesResponse](ApiMethods.POST, baseUrl, "/bulk/attributes", "application/json")
      .withBody(attributeSeed)
      .withSuccessResponse[AttributesResponse](201)
      .withErrorResponse[Problem](400)
      

  /**
   * returns the attribute in the registry corresponding to attributeId, if any.
   * 
   * Expected answers:
   *   code 200 : Attribute (Attribute data)
   *   code 404 : Problem (Attribute not found)
   * 
   * @param attributeId registry identifier of the attribute to lookup.
   */
  def getAttributeById(attributeId: UUID): ApiRequest[Attribute] =
    ApiRequest[Attribute](ApiMethods.GET, baseUrl, "/attributes/{attributeId}", "application/json")
      .withPathParam("attributeId", attributeId)
      .withSuccessResponse[Attribute](200)
      .withErrorResponse[Problem](404)
      

  /**
   * returns the attribute in the registry corresponding to name, if any.
   * 
   * Expected answers:
   *   code 200 : Attribute (Attribute data)
   *   code 404 : Problem (Attribute not found)
   * 
   * @param name name of the attribute to lookup.
   */
  def getAttributeByName(name: String): ApiRequest[Attribute] =
    ApiRequest[Attribute](ApiMethods.GET, baseUrl, "/attributes/name/{name}", "application/json")
      .withPathParam("name", name)
      .withSuccessResponse[Attribute](200)
      .withErrorResponse[Problem](404)
      

  /**
   * Returns the list of currently available attributes
   * 
   * Expected answers:
   *   code 200 : AttributesResponse (array of currently available attributes)
   *   code 404 : Problem (Attributes not found)
   * 
   * @param search 
   */
  def getAttributes(search: Option[String] = None): ApiRequest[AttributesResponse] =
    ApiRequest[AttributesResponse](ApiMethods.GET, baseUrl, "/attributes", "application/json")
      .withQueryParam("search", search)
      .withSuccessResponse[AttributesResponse](200)
      .withErrorResponse[Problem](404)
      

  /**
   * Returns the list of attributes indicated in the request
   * 
   * Expected answers:
   *   code 200 : AttributesResponse (array of attributes)
   * 
   * @param ids a string representing the attribute ids concatenated by \",\"
   */
  def getBulkedAttributes(ids: Option[String] = None): ApiRequest[AttributesResponse] =
    ApiRequest[AttributesResponse](ApiMethods.GET, baseUrl, "/bulk/attributes", "application/json")
      .withQueryParam("ids", ids)
      .withSuccessResponse[AttributesResponse](200)
      



}

